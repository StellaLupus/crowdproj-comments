#file: noinspection SwYamlUnresolvedReferencesInspection
openapi: 3.0.3
info:
  title: 'Crowdproj comments service'
  description: 'Microservice for managing comments feature for any object (article, product, news, etc.)'
  contact:
    email: soulofpain.k@gmail.com
  license:
    name: Apache 2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0.html'
  version: 1.0.0
servers:
  - url: http://localhost:8080
  - url: http://127.0.0.1:8080
tags:
  - name: comment
    description: support of comments microservice

paths:
  /v1/create:
    post:
      tags:
        - comment
      summary: Create comment
      operationId: commentCreate
      parameters:
        - in: header
          name: X-Request-ID
          schema:
            $ref: './base.yaml#/components/schemas/RequestId'
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentCreateRequest'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentCreateResponse'
  /v1/read:
    post:
      tags:
        - comment
      summary: Read comment
      operationId: commentRead
      parameters:
        - in: header
          name: X-Request-ID
          schema:
            $ref: './base.yaml#/components/schemas/RequestId'
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentReadRequest'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentReadResponse'
  /v1/update:
    post:
      tags:
        - comment
      summary: Update comment
      operationId: commentUpdate
      parameters:
        - in: header
          name: X-Request-ID
          schema:
            $ref: './base.yaml#/components/schemas/RequestId'
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentUpdateRequest'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentUpdateResponse'
  /v1/delete:
    post:
      tags:
        - comment
      summary: Delete comment
      operationId: commentDelete
      parameters:
        - in: header
          name: X-Request-ID
          schema:
            $ref: './base.yaml#/components/schemas/RequestId'
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentDeleteRequest'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentDeleteResponse'
  /v1/search:
    post:
      tags:
        - comment
      summary: Search comment
      operationId: commentSearch
      parameters:
        - in: header
          name: X-Request-ID
          schema:
            $ref: './base.yaml#/components/schemas/RequestId'
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentSearchRequest'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentSearchResponse'


components:
  #-------------------------------
  # Reusable schemas (data models)
  #-------------------------------
  schemas:
    ICommentRequest:
      allOf:
        - $ref: './base.yaml#/components/schemas/IRequest'
        - $ref: './base.yaml#/components/schemas/CpRequestDebug'
        - type: object
          discriminator:
            propertyName: requestType
            mapping:
              create: '#/components/schemas/CommentCreateRequest'
              read: '#/components/schemas/CommentReadRequest'
              update: '#/components/schemas/CommentUpdateRequest'
              delete: '#/components/schemas/CommentDeleteRequest'
              search: '#/components/schemas/CommentSearchRequest'


    ICommentResponse:
      allOf:
        - $ref: './base.yaml#/components/schemas/IResponse'
        - type: object
          discriminator:
            propertyName: responseType
            mapping:
              create: '#/components/schemas/CommentCreateResponse'
              read: '#/components/schemas/CommentReadResponse'
              update: '#/components/schemas/CommentUpdateResponse'
              delete: '#/components/schemas/CommentDeleteResponse'
              search: '#/components/schemas/CommentSearchResponse'
              init: '#/components/schemas/CommentInitResponse'

    Error:
      $ref: './base.yaml#/components/schemas/Error'

    RequestId:
      $ref: './base.yaml#/components/schemas/RequestId'

    ResponseResult:
      $ref: './base.yaml#/components/schemas/ResponseResult'

    CommentId:
      type: string
      description: Comment identifier
      example: "12332221"

    ObjectType:
      type: string
      description: Object type comment referred to
      enum:
        - 'comment'
        - 'product'
        - 'ad'
      example: "ad"

    ObjectId:
      type: string
      description: Object identifier comment referred to
      example: "12321"

    CommentUserId:
      $ref: './base.yaml#/components/schemas/UserId'

    ContentType:
      type: string
      description: The content type
      enum:
        - "plain"
        - "html"
        - "json"
      example:
        "plain"

    CommentLock:
      type: string
      description: Comment optimistic lock version

    BaseComment:
      type: object
      description: The base object
      properties:
        objectType:
          $ref: '#/components/schemas/ObjectType'
        objectId:
          $ref: '#/components/schemas/ObjectId'
        userId:
          $ref: '#/components/schemas/CommentUserId'
        content:
          type: object
          description: The comment content
          example: "This is a comment"
        contentType:
          $ref: '#/components/schemas/ContentType'

    CommentInitResponse:
      allOf:
        - $ref: '#/components/schemas/ICommentResponse'

    CommentCreateObject: # Can be referenced as '#components/schemas/CommentCreateObject'
      allOf:
        - $ref: '#/components/schemas/BaseComment'

    CommentCreateRequest: # Can be referenced as '#components/schemas/CommentCreateRequest'
      allOf:
        - $ref: '#/components/schemas/ICommentRequest'
        - type: object
          properties:
            comment:
              $ref: '#/components/schemas/CommentCreateObject'

    CommentReadObject:
      allOf:
        - type: object
          properties:
            id:
              $ref: '#/components/schemas/CommentId'

    CommentReadRequest: # Can be referenced as '#components/schemas/CommentReadRequest'
      allOf:
        - $ref: '#/components/schemas/ICommentRequest'
        - type: object
          properties:
            comment:
              $ref: '#/components/schemas/CommentReadObject'


    CommentUpdateObject: # Can be referenced as '#components/schemas/CommentUpdateObject'
      allOf:
        - $ref: '#/components/schemas/BaseComment'
        - type: object
          properties:
            id:
              $ref: '#/components/schemas/CommentId'
            lock:
              $ref: '#/components/schemas/CommentLock'

    CommentUpdateRequest: # Can be referenced as '#components/schemas/CommentUpdateRequest'
      allOf:
        - $ref: '#/components/schemas/ICommentRequest'
        - type: object
          properties:
            comment:
              $ref: '#/components/schemas/CommentUpdateObject'

    CommentDeleteObject: # Can be referenced as '#components/schemas/CommentUpdateObject'
      allOf:
        - type: object
          properties:
            id:
              $ref: '#/components/schemas/CommentId'
            lock:
              $ref: '#/components/schemas/CommentLock'

    CommentDeleteRequest: # Can be referenced as '#components/schemas/CommentDeleteRequest'
      allOf:
        - $ref: '#/components/schemas/ICommentRequest'
        - type: object
          properties:
            comment:
              $ref: '#/components/schemas/CommentDeleteObject'

    CommentSearchFilter: # Can be referenced as '#components/schemas/CommentSearchFilter'
      type: object
      description: Filters for comments search
      properties:
        objectType:
          $ref: '#/components/schemas/ObjectType'
        objectId:
          $ref: '#/components/schemas/ObjectId'
        userId:
          $ref: '#/components/schemas/CommentUserId'

    CommentSearchRequest: # Can be referenced as '#components/schemas/CommentSearchRequest'
      allOf:
        - $ref: '#/components/schemas/ICommentRequest'
        - type: object
          properties:
            commentFilter:
              $ref: '#/components/schemas/CommentSearchFilter'

    CommentResponseObject:
      allOf:
        - $ref: '#/components/schemas/BaseComment'
        - type: object
          description: An object that returned in the response
          properties:
            id:
              $ref: '#/components/schemas/CommentId'
            createdAt:
              type: string
              format: date-time
              description: A comment date and time created
            updatedAt:
              type: string
              format: date-time
              description: A comment date and time updated
            lock:
              $ref: '#/components/schemas/CommentLock'
            permissions:
              type: array
              uniqueItems: true
              items:
                $ref: '#/components/schemas/CommentPermissions'

    CommentPermissions:
      type: string
      description: A list of available operations on comments
      enum:
        - read
        - update
        - delete
        - makeVisiblePublic
        - makeVisibleOwn
        - makeVisibleGroup

    CommentResponseSingle:
      allOf:
        - type: object
          description: A response with one comment
          properties:
            comment:
              $ref: '#/components/schemas/CommentResponseObject'

    CommentResponseMultiple:
      allOf:
        - type: object
          description: A response with multiple comments
          properties:
            comments:
              type: array
              items:
                $ref: '#/components/schemas/CommentResponseObject'

    CommentCreateResponse:
      allOf:
        - $ref: '#/components/schemas/ICommentResponse'
        - $ref: '#/components/schemas/CommentResponseSingle'

    CommentReadResponse: # Can be referenced as '#/components/schemas/RatingReadResponse'
      allOf:
        - $ref: '#/components/schemas/ICommentResponse'
        - $ref: '#/components/schemas/CommentResponseSingle'

    CommentUpdateResponse: # Can be referenced as '#/components/schemas/RatingUpdateResponse'
      allOf:
        - $ref: '#/components/schemas/ICommentResponse'
        - $ref: '#/components/schemas/CommentResponseSingle'

    CommentDeleteResponse: # Can be referenced as '#/components/schemas/RatingDeleteResponse'
      allOf:
        - $ref: '#/components/schemas/ICommentResponse'
        - $ref: '#/components/schemas/CommentResponseSingle'

    CommentSearchResponse: # Can be referenced as '#/components/schemas/RatingSearchResponse'
      allOf:
        - $ref: '#/components/schemas/ICommentResponse'
        - $ref: '#/components/schemas/CommentResponseMultiple'

